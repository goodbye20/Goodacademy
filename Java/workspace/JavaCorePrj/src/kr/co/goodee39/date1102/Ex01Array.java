package kr.co.goodee39.date1102;

public class Ex01Array {

	public static void main(String[] args) {
		// 배열
		/*
		 * - 하나의 변수 안에 연속된 여러개의 공간을 갖고 있는 변수
		 * - 같은 타입의 값 여러개를 하나의 변수에 가질 수 있다.
		 * - 같은 타입의 여러 변수를 하나의 묶음으로 다루는 것
		 * - 많은 양의 같은 타입의 데이터를 다룰 때 유리하다.
		 * - 배열의 각 요소는 연속적이다.
		 * - 배열의 각각의 요소를 인덱스라는 숫자를 이용해 구분하여 배열에 저장한다.
		 * - 인덱스라는 숫자를 활용해서 배열에 접근하거나 아니면 배열안에 있는 데이터를 호출할 수 있다.
		 * */
		
		// 배열의 선언 방식
		/*
		 * - 배열은 일반 변수에 []을 붙여 선언할 수 있다.
		 * - []의 위치는 타입뒤에 붙여도 상관이 없고, 변수 뒤에 붙여도 상관이 없다.
		 *
		 * 공간 선언 방식
		 * 
		 * - 배열에 값을 직접적으로 넣지 않고 공간만 선언하는 방식을 공간 선언 방식이라고 한다.
		 * - 배열에 공안을 선언할 때 초기화는 반드시 new type[length]형태로 선언하게 된다.
		 * - 선언 시 type은 반드시 받을 배열 변수의 타입과 일치해야 한다.
		 * - 공간 선언 방식을 통해 선언하게 되면 각 타입은 다음 아래와 같은 내용으로 자동 초기화가 이루어 진다.
		 *  => int : 0
		 *  => double : 0.0
		 *  => boolean: false
		 *  => char : 0x0000
		 *  => String : null 
		 * 
		 * 직접 할당 방식
		 * - 배열에 값을 선언하는 즉시 넣어서 사용하고자 할 경우 사용한다.
		 * - 값을 넣을 때 값들은 {}로 감싸야 한다.
		 * - 값은 쉼표(,)로 구분하여 값을 넣어주며 값의 타입은 선언한 배열의 타입과 같아야 한다.
		 * */
		
	
		int a [] = new int[5];
		int[] b = new int[5];
		
		
		a[0] = 1;
		
		System.out.println(a[0]);
		System.out.println(a); // 접근자로써 a의 주소형식만 출력됨
		
//		a[6] = 7; error -> ArrayIndexOutOfBoundsException(범위를 벗어났습니다.)
//		System.out.println(a[7]); 
		
		int[] c = {1,2,3,4}; // Java에서의 직접선언
//		int[] c = [1,2,3,4]; // JavaScript에서의 직접선언
		
		for(int i = 0; i < c.length; i++) {
			System.out.println(c[i]);
		}
		
		System.out.println("-----------");
		int[] d = {5,6,7,8};
		
		
		// for each문
		/*
		 * - 배열에서 사용할 수 있는 특수한 반복문
		 * - 배열의 처음부터 끝까지 순회할 경우 간편하게 사용할 수 있는 문법이다.
		 * - for each는 (받고자하는 아이템 : 배열)형태로 선언하여 배열의 처음과 끝까지 순차적으로
		 *   아이템에 담아 사용할 수 있다.
		 * - 훨씬 직관적이고, 간편하다는 장점이 존재한다.
		 * */
		for (int i : d) {
			// Java에는 for of 혹은 for in문법이 존재하지 않고,
			// 위와같은 for each 문법이 존재
			System.out.println(i);
		}
	}

}
