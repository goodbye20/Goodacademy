<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
   <!-- parameterType 가져오는 형태 -->
   <!-- resultType 내보내는 형태 -->
  
<mapper namespace="member">
	<resultMap type="kr.co.goodee39.vo.MemberMapper" id="memberMap">
		<result property="userId" column="id"/>
		<result property="userPassword" column="password"/>
		<result property="userName" column="name"/>
		<result property="userAge" column="age"/>
		<result property="userGender" column="gender"/>
		<result property="userEmail" column="email"/>
	</resultMap>

	<!-- 파라미터 타입 없이 한 row만 가져오는 형태 -->
	<select id="getCount" resultType="int">
		select count(*) from member
	</select>
	<select id="getNum" resultType="int">
		select 3
	</select>
	<select id="getFirstMember" resultType="map">
		select * from member limit 1
	</select>
	<!-- <select id="getFirstMemberWithVO" resultType="kr.co.goodee39.vo.MemberVO"> -->
	<select id="getFirstMemberWithVO" resultType="mvo">
		select * from member limit 1
	</select>
	<select id="getFirstMemberWithMapper" resultMap="memberMap">
		select * from member limit 1
	</select>
	<!-- 파라미터를 가지고 데이터를 들고오는 형태 -->
	<select id="getName" parameterType="String" resultType="String">
		select name from member where email = #{email}
	</select>
	<select id="getNameFromMap" parameterType="map" resultType="String">
		select name from member where email = #{email} and id = #{id}
	</select>
	<select id="getNameFromVO" parameterType="mvo" resultType="String">
		select name from member where email = #{email} and id = #{id}
	</select>
	<!-- 다수의 row를 가져오는방법 -->
	<select id="getList" resultType="map">
		select * from member
	</select>
	<select id="getListByVO" resultType="mvo">
		select * from member
	</select>
	
	
	<!-- cud 예제 -->
	<insert id="insertMember" parameterType="mvo">
		insert into member(id,password,name,age,gender,email)
		values(#{id},#{password},#{name},#{age},#{gender},#{email})
	</insert>
	
	<update id="updateMember" parameterType="mvo">
		update member set name=#{name} where id=#{id}
	</update>
	
	<delete id="deleteMember" parameterType="mvo">
		delete from member where id = #{id}
	</delete>
	
	<insert id="insertMember2" parameterType="mvo">
		<selectKey keyProperty="id" resultType="int" order="BEFORE">
		<!-- order을 통해 아래 쿼리가 실행되기 전 먼저 위 쿼리를 실행시킴 -->
			select MAX(ID)+ from member
		</selectKey>
		insert into member(id,password,name,age,gender,email)
		values(#{id},#{password},#{name},#{age},#{gender},#{email})
	</insert>
</mapper>